// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  company       String?
  role          UserRole  @default(DEVELOPER)
  emailVerified Boolean   @default(false)
  verifyToken   String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  developer     Developer?
  reviewer      Reviewer?
}

model Developer {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id])
  organizationName  String
  websiteUrl        String?
  phone             String?
  address           String?
  taxId             String?
  paypalEmail       String?
  isVerified        Boolean   @default(false)
  verificationDocs  Json?     // Store document URLs
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  apps              App[]
  payouts           Payout[]
}

model Reviewer {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  department String
  level      Int       @default(1)
  createdAt  DateTime  @default(now())
  
  reviews    AppReview[]
}

model App {
  id              String      @id @default(cuid())
  slug            String      @unique
  name            String
  developerId     String
  developer       Developer   @relation(fields: [developerId], references: [id])
  
  // App Details
  version         String
  description     String
  summary         String
  category        Category
  price           Float       @default(0)
  
  // Files
  apkUrl          String?
  iconUrl         String?
  screenshots     Json        // Array of screenshot URLs
  heroImageUrl    String?
  trailerUrl      String?
  
  // Technical Details
  sizeBytes       BigInt
  sha256          String?
  minApiLevel     Int         @default(29)
  targetDevices   Json        // Array of supported devices
  permissions     Json        // Array of required permissions
  
  // Status
  status          AppStatus   @default(DRAFT)
  publishedAt     DateTime?
  lastUpdated     DateTime    @updatedAt
  createdAt       DateTime    @default(now())
  
  // Metadata
  rating          Float?
  downloads       Int         @default(0)
  revenue         Float       @default(0)
  
  // Relations
  builds          AppBuild[]
  reviews         AppReview[]
  analytics       Analytics[]
  transactions    Transaction[]
}

model AppBuild {
  id            String    @id @default(cuid())
  appId         String
  app           App       @relation(fields: [appId], references: [id])
  version       String
  buildNumber   Int
  apkUrl        String
  releaseNotes  String?
  channel       ReleaseChannel @default(ALPHA)
  isActive      Boolean   @default(false)
  uploadedAt    DateTime  @default(now())
}

model AppReview {
  id            String    @id @default(cuid())
  appId         String
  app           App       @relation(fields: [appId], references: [id])
  reviewerId    String
  reviewer      Reviewer  @relation(fields: [reviewerId], references: [id])
  
  status        ReviewStatus
  technicalPass Boolean?
  contentPass   Boolean?
  notes         String?
  vrcResults    Json?     // VRC test results
  
  reviewedAt    DateTime  @default(now())
}

model Analytics {
  id          String    @id @default(cuid())
  appId       String
  app         App       @relation(fields: [appId], references: [id])
  date        DateTime
  downloads   Int       @default(0)
  views       Int       @default(0)
  revenue     Float     @default(0)
  sessions    Int       @default(0)
  crashRate   Float     @default(0)
  userRating  Float?
}

model Transaction {
  id          String    @id @default(cuid())
  appId       String
  app         App       @relation(fields: [appId], references: [id])
  userId      String
  amount      Float
  type        TransactionType
  status      TransactionStatus
  createdAt   DateTime  @default(now())
}

model Payout {
  id          String    @id @default(cuid())
  developerId String
  developer   Developer @relation(fields: [developerId], references: [id])
  amount      Float
  status      PayoutStatus
  method      String
  processedAt DateTime?
  createdAt   DateTime  @default(now())
}

// Enums
enum UserRole {
  DEVELOPER
  REVIEWER
  ADMIN
  USER
}

enum AppStatus {
  DRAFT
  IN_REVIEW
  CHANGES_REQUESTED
  APPROVED
  PUBLISHED
  SUSPENDED
}

enum ReviewStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}

enum Category {
  GAMES
  EDUCATION
  PRODUCTIVITY
  ENTERTAINMENT
  SOCIAL
  UTILITIES
  MEDICAL
  FITNESS
  ADVENTURE
  SIMULATION
}

enum ReleaseChannel {
  ALPHA
  BETA
  RC
  PRODUCTION
}

enum TransactionType {
  PURCHASE
  REFUND
  SUBSCRIPTION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}